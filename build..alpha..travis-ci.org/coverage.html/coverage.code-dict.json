{"/home/travis/build/npmtest/node-npmtest-text-miner/test.js":"/* istanbul instrument in package npmtest_text_miner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-text-miner/lib.npmtest_text_miner.js":"/* istanbul instrument in package npmtest_text_miner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_text_miner = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_text_miner = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-text-miner/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-text-miner && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_text_miner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_text_miner\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_text_miner.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_text_miner.rollup.js'] =\n            local.assetsDict['/assets.npmtest_text_miner.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_text_miner.__dirname + '/lib.npmtest_text_miner.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-text-miner/node_modules/text-miner/src/text-miner.js":"module.exports = {\n\t'contractions' : require(\"./contractions.js\"),\n\t'Corpus': require(\"./corpus.js\"),\n\t'Terms': require(\"./dtm.js\"),\n\t'weightTfIdf': require(\"./weightTfIdf.js\"),\n\t'utils': require(\"./utils.js\"),\n\t'STOPWORDS': require(\"./stopwords.js\"),\n};\n","/home/travis/build/npmtest/node-npmtest-text-miner/node_modules/text-miner/src/contractions.js":"'use strict';\n\n// CONTRACTIONS //\n\nvar CONTRACTIONS = {\n\t\t\"ain't\": [\"am not\", \"are not\", \"is not\", \"has not\",\"have not\"],\n\t\t\"aren't\": [\"are no\", \"am not\"],\n\t\t\"can't\": [\"cannot\"],\n\t\t\"can't've\": [\"cannot have\"],\n\t\t\"'cause\": [\"because\"],\n\t\t\"could've\": [\"could have\"],\n\t\t\"couldn't\": [\"could not\"],\n\t\t\"couldn't've\": [\"could not have\"],\n\t\t\"didn't\": [\"did not\"],\n\t\t\"doesn't\": [\"does not\"],\n\t\t\"don't\": [\"do not\"],\n\t\t\"hadn't\": [\"had not\"],\n\t\t\"hadn't've\": [\"had not have\"],\n\t\t\"hasn't\": [\"has not\"],\n\t\t\"haven't\": [\"have not\"],\n\t\t\"he'd\": [\"he had\",\"he would\"],\n\t\t\"he'd've\": [\"he would have\"],\n\t\t\"he'll\": [\"he shall\",\"he will\"],\n\t\t\"he'll've\": [\"he shall have\",\"he will have\"],\n\t\t\"he's\": [\"he has\",\"he is\"],\n\t\t\"how'd\": [\"how did\"],\n\t\t\"how'd'y\": [\"how do you\"],\n\t\t\"how'll\": [\"how will\"],\n\t\t\"how's\": [\"how has\",\"how is\", \"how does\"],\n\t\t\"I'd\": [\"I had\",\"I would\"],\n\t\t\"I'd've\": [\"I would have\"],\n\t\t\"I'll\": [\"I shall\",\"I will\"],\n\t\t\"I'll've\": [\"I shall have\",\"I will have\"],\n\t\t\"I'm\": [\"I am\"],\n\t\t\"I've\": [\"I have\"],\n\t\t\"isn't\": [\"is not\"],\n\t\t\"it'd\": [\"it had\",\"it would\"],\n\t\t\"it'd've\": [\"it would have\"],\n\t\t\"it'll\": [\"it shall\",\"it will\"],\n\t\t\"it'll've\": [\"it shall have\",\"it will have\"],\n\t\t\"it's\": [\"it has\",\"it is\"],\n\t\t\"let's\": [\"let us\"],\n\t\t\"ma'am\": [\"madam\"],\n\t\t\"mayn't\": [\"may not\"],\n\t\t\"might've\": [\"might have\"],\n\t\t\"mightn't\": [\"might not\"],\n\t\t\"mightn't've\": [\"might not have\"],\n\t\t\"must've\": [\"must have\"],\n\t\t\"mustn't\": [\"must not\"],\n\t\t\"mustn't've\": [\"must not have\"],\n\t\t\"needn't\": [\"need not\"],\n\t\t\"needn't've\": [\"need not have\"],\n\t\t\"o'clock\": [\"of the clock\"],\n\t\t\"oughtn't\": [\"ought not\"],\n\t\t\"oughtn't've\": [\"ought not have\"],\n\t\t\"shan't\": [\"shall not\"],\n\t\t\"sha'n't\": [\"shall not\"],\n\t\t\"shan't've\": [\"shall not have\"],\n\t\t\"she'd\": [\"she had\",\"she would\"],\n\t\t\"she'd've\": [\"she would have\"],\n\t\t\"she'll\": [\"she shall\",\"she will\"],\n\t\t\"she'll've\": [\"she shall have\",\"she will have\"],\n\t\t\"she's\": [\"she has\",\"she is\"],\n\t\t\"should've\": [\"should have\"],\n\t\t\"shouldn't\": [\"should not\"],\n\t\t\"shouldn't've\": [\"should not have\"],\n\t\t\"so've\": [\"so have\"],\n\t\t\"so's\": [\"so as\",\"so is\"],\n\t\t\"that'd\": [\"that would\",\"that had\"],\n\t\t\"that'd've\": [\"that would have\"],\n\t\t\"that's\": [\"that has\",\"that is\"],\n\t\t\"there'd\": [\"there had\",\"there would\"],\n\t\t\"there'd've\": [\"there would have\"],\n\t\t\"there's\": [\"there has\",\"there is\"],\n\t\t\"they'd\": [\"they had\",\"they would\"],\n\t\t\"they'd've\": [\"they would have\"],\n\t\t\"they'll\": [\"they shall\",\"they will\"],\n\t\t\"they'll've\": [\"they shall have\",\"they will have\"],\n\t\t\"they're\": [\"they are\"],\n\t\t\"they've\": [\"they have\"],\n\t\t\"to've\": [\"to have\"],\n\t\t\"wasn't\": [\"was not\"],\n\t\t\"we'd\": [\"we had\",\"we would\"],\n\t\t\"we'd've\": [\"we would have\"],\n\t\t\"we'll\": [\"we will\"],\n\t\t\"we'll've\": [\"we will have\"],\n\t\t\"we're\": [\"we are\"],\n\t\t\"we've\": [\"we have\"],\n\t\t\"weren't\": [\"were not\"],\n\t\t\"what'll\": [\"what shall\",\"what will\"],\n\t\t\"what'll've\": [\"what shall have\",\"what will have\"],\n\t\t\"what're\": [\"what are\"],\n\t\t\"what's\": [\"what has\",\"what is\"],\n\t\t\"what've\": [\"what have\"],\n\t\t\"when's\": [\"when has\",\"when is\"],\n\t\t\"when've\": [\"when have\"],\n\t\t\"where'd\": [\"where did\"],\n\t\t\"where's\": [\"where has\",\"where is\"],\n\t\t\"where've\": [\"where have\"],\n\t\t\"who'll\": [\"who shall\",\"who will\"],\n\t\t\"who'll've\": [\"who shall have\",\"who will have\"],\n\t\t\"who's\": [\"who has\",\"who is\"],\n\t\t\"who've\": [\"who have\"],\n\t\t\"why's\": [\"why has\",\"why is\"],\n\t\t\"why've\": [\"why have\"],\n\t\t\"will've\": [\"will have\"],\n\t\t\"won't\": [\"will not\"],\n\t\t\"won't've\": [\"will not have\"],\n\t\t\"would've\": [\"would have\"],\n\t\t\"wouldn't\": [\"would not\"],\n\t\t\"wouldn't've\": [\"would not have\"],\n\t\t\"y'all\": [\"you all\"],\n\t\t\"y'all'd\": [\"you all would\"],\n\t\t\"y'all'd've\": [\"you all would have\"],\n\t\t\"y'all're\": [\"you all are\"],\n\t\t\"y'all've\": [\"you all have\"],\n\t\t\"you'd\": [\"you had\",\"you would\"],\n\t\t\"you'd've\": [\"you would have\"],\n\t\t\"you'll\": [\"you shall\",\"you will\"],\n\t\t\"you'll've\": [\"you shall have\",\"you will have\"],\n\t\t\"you're\": [\"you are\"],\n\t\t\"you've\": [\"you have\"]\n};\n\n\n// EXPORTS //\n\nmodule.exports = CONTRACTIONS;\n","/home/travis/build/npmtest/node-npmtest-text-miner/node_modules/text-miner/src/corpus.js":"'use strict';\n\nvar _  = require( 'underscore' );\n\n// Import Underscore.string to separate object, because there are conflict functions (include, reverse, contains)\n_.str = require( 'underscore.string' );\n\n// Mix in non-conflict functions to Underscore namespace if you want\n_.mixin( _.str.exports() );\n\n// All functions, include conflict, will be available through _.str object\n_.str.include( 'Underscore.string', 'string' ); // => true\n\nvar natural = null;\n\n/**\n* FUNCTION Corpus( [docs] )\n*\tCreate a corpus of documents.\n*\n* @constructor\n* @param {String|Array} docs - string representing a single document or an array of documents\n*/\nfunction Corpus( docs ) {\n\n\t// load natural module\n\tif ( !natural ) {\n\t\tnatural = require( 'natural' );\n\t}\n\n\t// if nothing passed, treat docs as empty array\n\tif ( docs === undefined ) {\n\t\tdocs = [];\n\t}\n\n\tif ( !( this instanceof Corpus ) ) {\n\t\treturn new Corpus(docs);\n\t}\n\n\tvar self = this;\n\n\tif ( typeof docs === \"string\" ) {\n\t\tdocs = new Array(docs);\n\t\tthis.documents = docs;\n\t} else if ( Array.isArray(docs) === true && docs.every( function(doc){\n\t\treturn typeof doc === \"string\";} ) ) {\n\t\tthis.documents = docs;\n\t} else {\n\t\tthrow new TypeError(\"Constructor expects array of documents\");\n\t}\n\n\t// hold meta information for documents\n\tthis.meta = [];\n\n\t// adds new document to Corpus\n\tthis.addDoc = function addDoc( doc ) {\n\t\tif (typeof doc === \"string\"){\n\t\t\tself.documents.push(doc);\n\t\t}\n\t\telse {\n\t\t\tthrow new TypeError(\"Argument has to be a string\");\n\t\t}\n\t};\n\n\tthis.addDocs = function addDocs( docs ) {\n\t\tif (Array.isArray(docs) === true && docs.every(function(doc){\n\t\t\treturn typeof doc === \"string\";\n\t\t})){\n\t\t\tself.documents = self.documents.concat(docs);\n\t\t} else {\n\t\t\tthrow new TypeError(\"Parameter expects an array of strings\");\n\t\t}\n\t};\n\n\t// strips extra whitespace from docs\n\tthis.clean = function clean() {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\treturn _.clean(doc);\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.trim = function trim() {\n\t\tself.documents = this.documents.map(function(doc){\n\t\t\treturn _.trim(doc);\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.inspect = function inspect( truncLength ) {\n\t\tif ( truncLength === undefined ){\n\t\t\ttruncLength = 200;\n\t\t}\n\t\ttruncLength = 200;\n\t\tself.documents.forEach( function( doc, index ) {\n\t\t\tconsole.log(\"Document \" + index + \":\");\n\t\t\tconsole.log( _(doc).truncate( truncLength ) );\n\t\t\tconsole.log(\"\\u2500 \\u2500 \\u2500 \\u2500 \\u2500\");\n\t\t});\n\t};\n\n\tthis.toLower = function toLower() {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\treturn doc.toLowerCase();\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.toUpper = function toUpper() {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\treturn doc.toUpperCase();\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.stem = function stem( type ) {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\tif( type === \"Lancaster\" ) {\n\t\t\t\treturn natural.LancasterStemmer.stem(doc);\n\t\t\t} else {\n\t\t\t\treturn natural.PorterStemmer.stem(doc);\n\t\t\t}\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.map = function map( FUN ) {\n\t\tself.documents = this.documents.map(FUN);\n\t\treturn self;\n\t};\n\n\tthis.removeWords = function removeWords( words, case_insensitive ) {\n\t\tfor ( var doc = 0; doc < self.documents.length; doc++ ) {\n\t\t\tfor ( var i = 0; i < words.length; i++ ) {\n\t\t\t\tvar options = case_insensitive ? \"gi\" : \"g\";\n\t\t\t\tvar myRegExp = new RegExp( \"\\\\b\" + words[i] + \"\\\\b\", options );\n\t\t\t\tself.documents[doc] = self.documents[doc].replace( myRegExp,\"\" );\n\t\t\t}\n\t\t}\n\t\t// Clean the newly created extra whitespace...\n\t\tself.clean();\n\t\treturn self;\n\t};\n\n\tthis.removeInterpunctuation = function removeInterpunctuation() {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\treturn doc.replace(/[\\!\\?\\.,;-]/g, \" \");\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.removeNewlines = function removeNewlines() {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\treturn doc.replace(/\\r?\\n|\\r/g, \" \");\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.removeDigits = function removeDigits() {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\treturn doc.replace(/\\d/g,\"\");\n\t\t});\n\t\treturn self;\n\t};\n\n\tthis.removeInvalidCharacters = function removeInvalidCharacters() {\n\t\tself.documents = self.documents.map(function(doc){\n\t\t\treturn doc.replace(/\\uFFFD/g, '');\n\t\t});\n\t\treturn self;\n\t};\n\n} // end FUNCTION Corpus()\n\n\n// EXPORTS //\n\nmodule.exports = Corpus;\n","/home/travis/build/npmtest/node-npmtest-text-miner/node_modules/text-miner/src/dtm.js":"'use strict';\n\n// MODULES //\n\nvar _ = require( 'underscore' );\n\n\n// DOCUMENT-TERM MATRIX //\n\n/**\n* FUNCTION Terms( corpus )\n*\tCreates a term-document matrix object.\n*\n* @constructor\n* @param {Object} corpus - an instance of class Corpus\n*/\nfunction Terms( corpus ) {\n\n\tif( !( this instanceof Terms ) ) {\n\t\treturn new Terms(corpus);\n\t}\n\n\tvar self = this;\n\n\tthis.vocabulary = [];\n\tthis.dtm = [];\n\n\tObject.defineProperty( this, \"nDocs\", {\n\t\tget: function() {\n\t\t\treturn this.dtm.length;\n\t\t},\n\t\tenumerable: true\n\t});\n\n\tObject.defineProperty( this, \"nTerms\", {\n\t\tget: function() {\n\t\t\treturn this.vocabulary.length;\n\t\t},\n\t\tenumerable: true\n\t});\n\n\tthis.fill_zeros = function() {\n\t\tfor ( var doc = 0; doc < self.dtm.length; doc++ ) {\n\t\t\tfor ( var word = 0; word < self.dtm[0].length; word++ ) {\n\t\t\t\tif ( self.dtm[doc][word] === undefined ) {\n\t\t\t\t\tself.dtm[doc][word] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn self;\n\t};\n\n\tfunction _processDoc( doc ) {\n\n\t\tvar wordArray = doc.split( ' ' );\n\t\tvar words = [];\n\n\t\tfor ( var i = 0; i < wordArray.length; i++ ){\n\t\t\tvar current_word = wordArray[i];\n\t\t\tvar index = self.vocabulary.indexOf( current_word );\n\n\t\t\tif ( index > -1 ) {\n\t\t\t\t\twords[index] = words[index] + 1 || 1;\n\t\t\t} else {\n\t\t\t\t\twords[self.vocabulary.length] = 1;\n\t\t\t\t\tself.vocabulary.push( current_word );\n\t\t\t}\n\t\t}\n\t\tself.dtm.push(words);\n\t}\n\n\tfunction _wordFreq( wordIndex ) {\n\t\tvar mapping = self.dtm.map( function( doc ) {\n\t\t\treturn doc[wordIndex] || 0;\n\t\t});\n\t\tvar reducing = mapping.reduce( function( a, b ) {\n\t\t\treturn a + b;\n\t\t});\n\t\treturn reducing;\n\t}\n\n\tthis.findFreqTerms = function( n ) {\n\t\tvar wordArray = [];\n\t\tfor ( var w = 0; w < self.vocabulary.length; w++ ) {\n\t\t\tvar wordCount = _wordFreq(w);\n\t\t\tvar obj = {};\n\t\t\tobj.word = self.vocabulary[w];\n\t\t\tobj.count = wordCount;\n\t\t\tif ( wordCount >= n ) {\n\t\t\t\twordArray.push(obj);\n\t\t\t}\n\t\t}\n\n\t\tvar sortedWordArray = _.sortBy( wordArray, function( obj ) {\n\t\t\treturn obj.word;\n\t\t});\n\t\treturn sortedWordArray;\n\t};\n\n\tthis.removeSparseTerms = function( percent ) {\n\n\t\tvar flaggedForKeeping = [];\n\t\tfor ( var w = 0; w < self.vocabulary.length; w++ ) {\n\t\t\tvar counter = 0;\n\t\t\tfor ( var d = 0; d < self.dtm.length; d++ ){\n\t\t\t\tvar doc = self.dtm[d];\n\t\t\t\tif ( doc !== undefined && doc[w] !== undefined ) {\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( counter / self.dtm.length >= percent ) {\n\t\t\t\tflaggedForKeeping.push(w);\n\t\t\t}\n\t\t}\n\n\t\tvar newVocabulary = [];\n\t\tfor ( var i = 0; i < flaggedForKeeping.length; i++ ) {\n\t\t\tnewVocabulary.push( self.vocabulary[ flaggedForKeeping[i] ] );\n\t\t}\n\n\t\tfor ( var d2 = 0; d2 < self.dtm.length; d2++ ) {\n\t\t\tvar newVec = [];\n\t\t\tfor ( var j = 0; j < flaggedForKeeping.length; j++ ) {\n\t\t\t\tnewVec.push( self.dtm[d2][ flaggedForKeeping[j] ] );\n\t\t\t}\n\t\t\tself.dtm[d2] = newVec;\n\t\t}\n\n\t\tself.vocabulary = newVocabulary;\n\t\treturn self;\n\t};\n\n\tthis.weighting = function( fun ) {\n\t\tself.dtm = fun(self.dtm);\n\t\treturn self;\n\t};\n\n\t// initialization\n\tthis.init = function( documents ) {\n\t\tvar i;\n\n\t\tfor ( i = 0; i < documents.length; i++ ) {\n\t\t\t_processDoc( documents[i] );\n\t\t}\n\n\t\tfor ( i = 0; i < self.dtm.length; i++ ) {\n\t\t\tvar doc = self.dtm[i];\n\t\t\tdoc.length = self.vocabulary.length; // ensure that all rows in dtm have same length\n\t\t}\n\n\t};\n\tself.init( corpus.documents );\n\n} // end FUNCTION Terms()\n\n\n// EXPORTS //\n\nmodule.exports = Terms;\n","/home/travis/build/npmtest/node-npmtest-text-miner/node_modules/text-miner/src/weightTfIdf.js":"'use strict';\n\n/**\n* FUNCTION weightTfIdf( dtm )\n*\tWeights a term-document matrix by\n*\tterm frequency - inverse document frequency.\n*\n* @param {Object} dtm - input document-term matrix\n* @returns {Object} mutated document-term matrix object\n*/\nfunction weightTfIdf( dtm ) {\n\tvar word_doc_freq = [];\n\tfor ( var w = 0; w < dtm[0].length; w++ ) {\n\t\tvar count = 0;\n\t\tfor ( var d = 0; d < dtm.length; d++ ) {\n\t\t\tif ( dtm[d][w] !== undefined ) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tword_doc_freq.push( count );\n\t}\n\tfor ( var doc = 0; doc < dtm.length; doc++ ) {\n\t\tfor ( var word = 0; word < dtm[0].length; word++ ){\n\t\t\tvar idf = Math.log( dtm.length ) - Math.log( 1 + word_doc_freq[word] );\n\t\t\tif ( dtm[doc][word] !== undefined ) {\n\t\t\t\tdtm[doc][word] = dtm[doc][word] * idf;\n\t\t\t}\n\t\t}\n\t}\n\treturn dtm;\n} // end FUNCTION weightTfIdf()\n\n\n// EXPORTS //\n\nmodule.exports = weightTfIdf;\n","/home/travis/build/npmtest/node-npmtest-text-miner/node_modules/text-miner/src/utils.js":"'use strict';\n\n// VARIABLES //\n\nvar CONTRACTIONS = require(\"./contractions.js\");\n\n\n// UTILS //\n\nvar utils = {};\n\nutils.expandContractions = function expandContractions( str ) {\n\tfor ( var key in CONTRACTIONS ) {\n\t\tstr = str.replace( new RegExp(key,\"gi\"), CONTRACTIONS[key][0] );\n\t}\n\treturn str;\n};\n\n// EXPORTS //\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-text-miner/node_modules/text-miner/src/stopwords.js":"'use strict';\n\n// STOPWORS //\n\nvar STOPWORDS = {};\n\nSTOPWORDS.DE = [\"a\",\"ab\",\"aber\",\"aber\",\"ach\",\"acht\",\"achte\",\"achten\",\"achter\",\"achtes\",\"ag\",\"alle\",\"allein\",\"allem\",\"allen\",\"aller\",\"allerdings\",\"alles\",\"allgemeinen\",\"als\",\"als\",\"also\",\"am\",\"an\",\"andere\",\"anderen\",\"andern\",\"anders\",\"au\",\"auch\",\"auch\",\"auf\",\"aus\",\"ausser\",\"außer\",\"ausserdem\",\"außerdem\",\"b\",\"bald\",\"bei\",\"beide\",\"beiden\",\"beim\",\"beispiel\",\"bekannt\",\"bereits\",\"besonders\",\"besser\",\"besten\",\"bin\",\"bis\",\"bisher\",\"bist\",\"c\",\"d\",\"da\",\"dabei\",\"dadurch\",\"dafür\",\"dagegen\",\"daher\",\"dahin\",\"dahinter\",\"damals\",\"damit\",\"danach\",\"daneben\",\"dank\",\"dann\",\"daran\",\"darauf\",\"daraus\",\"darf\",\"darfst\",\"darin\",\"darüber\",\"darum\",\"darunter\",\"das\",\"das\",\"dasein\",\"daselbst\",\"dass\",\"daß\",\"dasselbe\",\"davon\",\"davor\",\"dazu\",\"dazwischen\",\"dein\",\"deine\",\"deinem\",\"deiner\",\"dem\",\"dementsprechend\",\"demgegenüber\",\"demgemäss\",\"demgemäß\",\"demselben\",\"demzufolge\",\"den\",\"denen\",\"denn\",\"denn\",\"denselben\",\"der\",\"deren\",\"derjenige\",\"derjenigen\",\"dermassen\",\"dermaßen\",\"derselbe\",\"derselben\",\"des\",\"deshalb\",\"desselben\",\"dessen\",\"deswegen\",\"d.h\",\"dich\",\"die\",\"diejenige\",\"diejenigen\",\"dies\",\"diese\",\"dieselbe\",\"dieselben\",\"diesem\",\"diesen\",\"dieser\",\"dieses\",\"dir\",\"doch\",\"dort\",\"drei\",\"drin\",\"dritte\",\"dritten\",\"dritter\",\"drittes\",\"du\",\"durch\",\"durchaus\",\"dürfen\",\"dürft\",\"durfte\",\"durften\",\"e\",\"eben\",\"ebenso\",\"ehrlich\",\"ei\",\"ei,\",\"ei,\",\"eigen\",\"eigene\",\"eigenen\",\"eigener\",\"eigenes\",\"ein\",\"einander\",\"eine\",\"einem\",\"einen\",\"einer\",\"eines\",\"einige\",\"einigen\",\"einiger\",\"einiges\",\"einmal\",\"einmal\",\"eins\",\"elf\",\"en\",\"ende\",\"endlich\",\"entweder\",\"entweder\",\"er\",\"Ernst\",\"erst\",\"erste\",\"ersten\",\"erster\",\"erstes\",\"es\",\"etwa\",\"etwas\",\"euch\",\"f\",\"früher\",\"fünf\",\"fünfte\",\"fünften\",\"fünfter\",\"fünftes\",\"für\",\"g\",\"gab\",\"ganz\",\"ganze\",\"ganzen\",\"ganzer\",\"ganzes\",\"gar\",\"gedurft\",\"gegen\",\"gegenüber\",\"gehabt\",\"gehen\",\"geht\",\"gekannt\",\"gekonnt\",\"gemacht\",\"gemocht\",\"gemusst\",\"genug\",\"gerade\",\"gern\",\"gesagt\",\"gesagt\",\"geschweige\",\"gewesen\",\"gewollt\",\"geworden\",\"gibt\",\"ging\",\"gleich\",\"gott\",\"gross\",\"groß\",\"grosse\",\"große\",\"grossen\",\"großen\",\"grosser\",\"großer\",\"grosses\",\"großes\",\"gut\",\"gute\",\"guter\",\"gutes\",\"h\",\"habe\",\"haben\",\"habt\",\"hast\",\"hat\",\"hatte\",\"hätte\",\"hatten\",\"hätten\",\"heisst\",\"her\",\"heute\",\"hier\",\"hin\",\"hinter\",\"hoch\",\"i\",\"ich\",\"ihm\",\"ihn\",\"ihnen\",\"ihr\",\"ihre\",\"ihrem\",\"ihren\",\"ihrer\",\"ihres\",\"im\",\"im\",\"immer\",\"in\",\"in\",\"indem\",\"infolgedessen\",\"ins\",\"irgend\",\"ist\",\"j\",\"ja\",\"ja\",\"jahr\",\"jahre\",\"jahren\",\"je\",\"jede\",\"jedem\",\"jeden\",\"jeder\",\"jedermann\",\"jedermanns\",\"jedoch\",\"jemand\",\"jemandem\",\"jemanden\",\"jene\",\"jenem\",\"jenen\",\"jener\",\"jenes\",\"jetzt\",\"k\",\"kam\",\"kann\",\"kannst\",\"kaum\",\"kein\",\"keine\",\"keinem\",\"keinen\",\"keiner\",\"kleine\",\"kleinen\",\"kleiner\",\"kleines\",\"kommen\",\"kommt\",\"können\",\"könnt\",\"konnte\",\"könnte\",\"konnten\",\"kurz\",\"l\",\"lang\",\"lange\",\"lange\",\"leicht\",\"leide\",\"lieber\",\"los\",\"m\",\"machen\",\"macht\",\"machte\",\"mag\",\"magst\",\"mahn\",\"man\",\"manche\",\"manchem\",\"manchen\",\"mancher\",\"manches\",\"mann\",\"mehr\",\"mein\",\"meine\",\"meinem\",\"meinen\",\"meiner\",\"meines\",\"mensch\",\"menschen\",\"mich\",\"mir\",\"mit\",\"mittel\",\"mochte\",\"möchte\",\"mochten\",\"mögen\",\"möglich\",\"mögt\",\"morgen\",\"muss\",\"muß\",\"müssen\",\"musst\",\"müsst\",\"musste\",\"mussten\",\"n\",\"na\",\"nach\",\"nachdem\",\"nahm\",\"natürlich\",\"neben\",\"nein\",\"neue\",\"neuen\",\"neun\",\"neunte\",\"neunten\",\"neunter\",\"neuntes\",\"nicht\",\"nicht\",\"nichts\",\"nie\",\"niemand\",\"niemandem\",\"niemanden\",\"noch\",\"nun\",\"nun\",\"nur\",\"o\",\"ob\",\"ob\",\"oben\",\"oder\",\"oder\",\"offen\",\"oft\",\"oft\",\"ohne\",\"Ordnung\",\"p\",\"q\",\"r\",\"recht\",\"rechte\",\"rechten\",\"rechter\",\"rechtes\",\"richtig\",\"rund\",\"s\",\"sa\",\"sache\",\"sagt\",\"sagte\",\"sah\",\"satt\",\"schlecht\",\"Schluss\",\"schon\",\"sechs\",\"sechste\",\"sechsten\",\"sechster\",\"sechstes\",\"sehr\",\"sei\",\"sei\",\"seid\",\"seien\",\"sein\",\"seine\",\"seinem\",\"seinen\",\"seiner\",\"seines\",\"seit\",\"seitdem\",\"selbst\",\"selbst\",\"sich\",\"sie\",\"sieben\",\"siebente\",\"siebenten\",\"siebenter\",\"siebentes\",\"sind\",\"so\",\"solang\",\"solche\",\"solchem\",\"solchen\",\"solcher\",\"solches\",\"soll\",\"sollen\",\"sollte\",\"sollten\",\"sondern\",\"sonst\",\"sowie\",\"später\",\"statt\",\"t\",\"tag\",\"tage\",\"tagen\",\"tat\",\"teil\",\"tel\",\"tritt\",\"trotzdem\",\"tun\",\"u\",\"über\",\"überhaupt\",\"übrigens\",\"uhr\",\"um\",\"und\",\"und?\",\"uns\",\"unser\",\"unsere\",\"unserer\",\"unter\",\"v\",\"vergangenen\",\"viel\",\"viele\",\"vielem\",\"vielen\",\"vielleicht\",\"vier\",\"vierte\",\"vierten\",\"vierter\",\"viertes\",\"vom\",\"von\",\"vor\",\"w\",\"wahr?\",\"während\",\"währenddem\",\"währenddessen\",\"wann\",\"war\",\"wäre\",\"waren\",\"wart\",\"warum\",\"was\",\"wegen\",\"weil\",\"weit\",\"weiter\",\"weitere\",\"weiteren\",\"weiteres\",\"welche\",\"welchem\",\"welchen\",\"welcher\",\"welches\",\"wem\",\"wen\",\"wenig\",\"wenig\",\"wenige\",\"weniger\",\"weniges\",\"wenigstens\",\"wenn\",\"wenn\",\"wer\",\"werde\",\"werden\",\"werdet\",\"wessen\",\"wie\",\"wie\",\"wieder\",\"will\",\"willst\",\"wir\",\"wird\",\"wirklich\",\"wirst\",\"wo\",\"wohl\",\"wollen\",\"wollt\",\"wollte\",\"wollten\",\"worden\",\"wurde\",\"würde\",\"wurden\",\"würden\",\"x\",\"y\",\"z\",\"z.b\",\"zehn\",\"zehnte\",\"zehnten\",\"zehnter\",\"zehntes\",\"zeit\",\"zu\",\"zuerst\",\"zugleich\",\"zum\",\"zum\",\"zunächst\",\"zur\",\"zurück\",\"zusammen\",\"zwanzig\",\"zwar\",\"zwar\",\"zwei\",\"zweite\",\"zweiten\",\"zweiter\",\"zweites\",\"zwischen\",\"zwölf\"];\n\nSTOPWORDS.EN = [\"a\",\"a's\",\"able\",\"about\",\"above\",\"according\",\"accordingly\",\"across\",\"actually\",\"after\",\"afterwards\",\"again\",\"against\",\"ain't\",\"all\",\"allow\",\"allows\",\"almost\",\"alone\",\"along\",\"already\",\"also\",\"although\",\"always\",\"am\",\"among\",\"amongst\",\"an\",\"and\",\"another\",\"any\",\"anybody\",\"anyhow\",\"anyone\",\"anything\",\"anyway\",\"anyways\",\"anywhere\",\"apart\",\"appear\",\"appreciate\",\"appropriate\",\"are\",\"aren't\",\"around\",\"as\",\"aside\",\"ask\",\"asking\",\"associated\",\"at\",\"available\",\"away\",\"awfully\",\"b\",\"be\",\"became\",\"because\",\"become\",\"becomes\",\"becoming\",\"been\",\"before\",\"beforehand\",\"behind\",\"being\",\"believe\",\"below\",\"beside\",\"besides\",\"best\",\"better\",\"between\",\"beyond\",\"both\",\"brief\",\"but\",\"by\",\"c\",\"c'mon\",\"c's\",\"came\",\"can\",\"can't\",\"cannot\",\"cant\",\"cause\",\"causes\",\"certain\",\"certainly\",\"changes\",\"clearly\",\"co\",\"com\",\"come\",\"comes\",\"concerning\",\"consequently\",\"consider\",\"considering\",\"contain\",\"containing\",\"contains\",\"corresponding\",\"could\",\"couldn't\",\"course\",\"currently\",\"d\",\"definitely\",\"described\",\"despite\",\"did\",\"didn't\",\"different\",\"do\",\"does\",\"doesn't\",\"doing\",\"don't\",\"done\",\"down\",\"downwards\",\"during\",\"e\",\"each\",\"edu\",\"eg\",\"eight\",\"either\",\"else\",\"elsewhere\",\"enough\",\"entirely\",\"especially\",\"et\",\"etc\",\"even\",\"ever\",\"every\",\"everybody\",\"everyone\",\"everything\",\"everywhere\",\"ex\",\"exactly\",\"example\",\"except\",\"f\",\"far\",\"few\",\"fifth\",\"first\",\"five\",\"followed\",\"following\",\"follows\",\"for\",\"former\",\"formerly\",\"forth\",\"four\",\"from\",\"further\",\"furthermore\",\"g\",\"get\",\"gets\",\"getting\",\"given\",\"gives\",\"go\",\"goes\",\"going\",\"gone\",\"got\",\"gotten\",\"greetings\",\"h\",\"had\",\"hadn't\",\"happens\",\"hardly\",\"has\",\"hasn't\",\"have\",\"haven't\",\"having\",\"he\",\"he's\",\"hello\",\"help\",\"hence\",\"her\",\"here\",\"here's\",\"hereafter\",\"hereby\",\"herein\",\"hereupon\",\"hers\",\"herself\",\"hi\",\"him\",\"himself\",\"his\",\"hither\",\"hopefully\",\"how\",\"howbeit\",\"however\",\"i\",\"i'd\",\"i'll\",\"i'm\",\"i've\",\"ie\",\"if\",\"ignored\",\"immediate\",\"in\",\"inasmuch\",\"inc\",\"indeed\",\"indicate\",\"indicated\",\"indicates\",\"inner\",\"insofar\",\"instead\",\"into\",\"inward\",\"is\",\"isn't\",\"it\",\"it'd\",\"it'll\",\"it's\",\"its\",\"itself\",\"j\",\"just\",\"k\",\"keep\",\"keeps\",\"kept\",\"know\",\"knows\",\"known\",\"l\",\"last\",\"lately\",\"later\",\"latter\",\"latterly\",\"least\",\"less\",\"lest\",\"let\",\"let's\",\"like\",\"liked\",\"likely\",\"little\",\"look\",\"looking\",\"looks\",\"ltd\",\"m\",\"mainly\",\"many\",\"may\",\"maybe\",\"me\",\"mean\",\"meanwhile\",\"merely\",\"might\",\"more\",\"moreover\",\"most\",\"mostly\",\"much\",\"must\",\"my\",\"myself\",\"n\",\"name\",\"namely\",\"nd\",\"near\",\"nearly\",\"necessary\",\"need\",\"needs\",\"neither\",\"never\",\"nevertheless\",\"new\",\"next\",\"nine\",\"no\",\"nobody\",\"non\",\"none\",\"noone\",\"nor\",\"normally\",\"not\",\"nothing\",\"novel\",\"now\",\"nowhere\",\"o\",\"obviously\",\"of\",\"off\",\"often\",\"oh\",\"ok\",\"okay\",\"old\",\"on\",\"once\",\"one\",\"ones\",\"only\",\"onto\",\"or\",\"other\",\"others\",\"otherwise\",\"ought\",\"our\",\"ours\",\"ourselves\",\"out\",\"outside\",\"over\",\"overall\",\"own\",\"p\",\"particular\",\"particularly\",\"per\",\"perhaps\",\"placed\",\"please\",\"plus\",\"possible\",\"presumably\",\"probably\",\"provides\",\"q\",\"que\",\"quite\",\"qv\",\"r\",\"rather\",\"rd\",\"re\",\"really\",\"reasonably\",\"regarding\",\"regardless\",\"regards\",\"relatively\",\"respectively\",\"right\",\"s\",\"said\",\"same\",\"saw\",\"say\",\"saying\",\"says\",\"second\",\"secondly\",\"see\",\"seeing\",\"seem\",\"seemed\",\"seeming\",\"seems\",\"seen\",\"self\",\"selves\",\"sensible\",\"sent\",\"serious\",\"seriously\",\"seven\",\"several\",\"shall\",\"she\",\"should\",\"shouldn't\",\"since\",\"six\",\"so\",\"some\",\"somebody\",\"somehow\",\"someone\",\"something\",\"sometime\",\"sometimes\",\"somewhat\",\"somewhere\",\"soon\",\"sorry\",\"specified\",\"specify\",\"specifying\",\"still\",\"sub\",\"such\",\"sup\",\"sure\",\"t\",\"t's\",\"take\",\"taken\",\"tell\",\"tends\",\"th\",\"than\",\"thank\",\"thanks\",\"thanx\",\"that\",\"that's\",\"thats\",\"the\",\"their\",\"theirs\",\"them\",\"themselves\",\"then\",\"thence\",\"there\",\"there's\",\"thereafter\",\"thereby\",\"therefore\",\"therein\",\"theres\",\"thereupon\",\"these\",\"they\",\"they'd\",\"they'll\",\"they're\",\"they've\",\"think\",\"third\",\"this\",\"thorough\",\"thoroughly\",\"those\",\"though\",\"three\",\"through\",\"throughout\",\"thru\",\"thus\",\"to\",\"together\",\"too\",\"took\",\"toward\",\"towards\",\"tried\",\"tries\",\"truly\",\"try\",\"trying\",\"twice\",\"two\",\"u\",\"un\",\"under\",\"unfortunately\",\"unless\",\"unlikely\",\"until\",\"unto\",\"up\",\"upon\",\"us\",\"use\",\"used\",\"useful\",\"uses\",\"using\",\"usually\",\"uucp\",\"v\",\"value\",\"various\",\"very\",\"via\",\"viz\",\"vs\",\"w\",\"want\",\"wants\",\"was\",\"wasn't\",\"way\",\"we\",\"we'd\",\"we'll\",\"we're\",\"we've\",\"welcome\",\"well\",\"went\",\"were\",\"weren't\",\"what\",\"what's\",\"whatever\",\"when\",\"whence\",\"whenever\",\"where\",\"where's\",\"whereafter\",\"whereas\",\"whereby\",\"wherein\",\"whereupon\",\"wherever\",\"whether\",\"which\",\"while\",\"whither\",\"who\",\"who's\",\"whoever\",\"whole\",\"whom\",\"whose\",\"why\",\"will\",\"willing\",\"wish\",\"with\",\"within\",\"without\",\"won't\",\"wonder\",\"would\",\"would\",\"wouldn't\",\"x\",\"y\",\"yes\",\"yet\",\"you\",\"you'd\",\"you'll\",\"you're\",\"you've\",\"your\",\"yours\",\"yourself\",\"yourselves\",\"z\",\"zero\"];\n\nSTOPWORDS.ES = [\"él\",\"ésta\",\"éstas\",\"éste\",\"éstos\",\"última\",\"últimas\",\"último\",\"últimos\",\"a\",\"añadió\",\"aún\",\"actualmente\",\"adelante\",\"además\",\"afirmó\",\"agregó\",\"ahí\",\"ahora\",\"al\",\"algún\",\"algo\",\"alguna\",\"algunas\",\"alguno\",\"algunos\",\"alrededor\",\"ambos\",\"ante\",\"anterior\",\"antes\",\"apenas\",\"aproximadamente\",\"aquí\",\"así\",\"aseguró\",\"aunque\",\"ayer\",\"bajo\",\"bien\",\"buen\",\"buena\",\"buenas\",\"bueno\",\"buenos\",\"cómo\",\"cada\",\"casi\",\"cerca\",\"cierto\",\"cinco\",\"comentó\",\"como\",\"con\",\"conocer\",\"consideró\",\"considera\",\"contra\",\"cosas\",\"creo\",\"cual\",\"cuales\",\"cualquier\",\"cuando\",\"cuanto\",\"cuatro\",\"cuenta\",\"da\",\"dado\",\"dan\",\"dar\",\"de\",\"debe\",\"deben\",\"debido\",\"decir\",\"dejó\",\"del\",\"demás\",\"dentro\",\"desde\",\"después\",\"dice\",\"dicen\",\"dicho\",\"dieron\",\"diferente\",\"diferentes\",\"dijeron\",\"dijo\",\"dio\",\"donde\",\"dos\",\"durante\",\"e\",\"ejemplo\",\"el\",\"ella\",\"ellas\",\"ello\",\"ellos\",\"embargo\",\"en\",\"encuentra\",\"entonces\",\"entre\",\"era\",\"eran\",\"es\",\"esa\",\"esas\",\"ese\",\"eso\",\"esos\",\"está\",\"están\",\"esta\",\"estaba\",\"estaban\",\"estamos\",\"estar\",\"estará\",\"estas\",\"este\",\"esto\",\"estos\",\"estoy\",\"estuvo\",\"ex\",\"existe\",\"existen\",\"explicó\",\"expresó\",\"fin\",\"fue\",\"fuera\",\"fueron\",\"gran\",\"grandes\",\"ha\",\"había\",\"habían\",\"haber\",\"habrá\",\"hace\",\"hacen\",\"hacer\",\"hacerlo\",\"hacia\",\"haciendo\",\"han\",\"hasta\",\"hay\",\"haya\",\"he\",\"hecho\",\"hemos\",\"hicieron\",\"hizo\",\"hoy\",\"hubo\",\"igual\",\"incluso\",\"indicó\",\"informó\",\"junto\",\"la\",\"lado\",\"las\",\"le\",\"les\",\"llegó\",\"lleva\",\"llevar\",\"lo\",\"los\",\"luego\",\"lugar\",\"más\",\"manera\",\"manifestó\",\"mayor\",\"me\",\"mediante\",\"mejor\",\"mencionó\",\"menos\",\"mi\",\"mientras\",\"misma\",\"mismas\",\"mismo\",\"mismos\",\"momento\",\"mucha\",\"muchas\",\"mucho\",\"muchos\",\"muy\",\"nada\",\"nadie\",\"ni\",\"ningún\",\"ninguna\",\"ningunas\",\"ninguno\",\"ningunos\",\"no\",\"nos\",\"nosotras\",\"nosotros\",\"nuestra\",\"nuestras\",\"nuestro\",\"nuestros\",\"nueva\",\"nuevas\",\"nuevo\",\"nuevos\",\"nunca\",\"o\",\"ocho\",\"otra\",\"otras\",\"otro\",\"otros\",\"para\",\"parece\",\"parte\",\"partir\",\"pasada\",\"pasado\",\"pero\",\"pesar\",\"poca\",\"pocas\",\"poco\",\"pocos\",\"podemos\",\"podrá\",\"podrán\",\"podría\",\"podrían\",\"poner\",\"por\",\"porque\",\"posible\",\"próximo\",\"próximos\",\"primer\",\"primera\",\"primero\",\"primeros\",\"principalmente\",\"propia\",\"propias\",\"propio\",\"propios\",\"pudo\",\"pueda\",\"puede\",\"pueden\",\"pues\",\"qué\",\"que\",\"quedó\",\"queremos\",\"quién\",\"quien\",\"quienes\",\"quiere\",\"realizó\",\"realizado\",\"realizar\",\"respecto\",\"sí\",\"sólo\",\"se\",\"señaló\",\"sea\",\"sean\",\"según\",\"segunda\",\"segundo\",\"seis\",\"ser\",\"será\",\"serán\",\"sería\",\"si\",\"sido\",\"siempre\",\"siendo\",\"siete\",\"sigue\",\"siguiente\",\"sin\",\"sino\",\"sobre\",\"sola\",\"solamente\",\"solas\",\"solo\",\"solos\",\"son\",\"su\",\"sus\",\"tal\",\"también\",\"tampoco\",\"tan\",\"tanto\",\"tenía\",\"tendrá\",\"tendrán\",\"tenemos\",\"tener\",\"tenga\",\"tengo\",\"tenido\",\"tercera\",\"tiene\",\"tienen\",\"toda\",\"todas\",\"todavía\",\"todo\",\"todos\",\"total\",\"tras\",\"trata\",\"través\",\"tres\",\"tuvo\",\"un\",\"una\",\"unas\",\"uno\",\"unos\",\"usted\",\"va\",\"vamos\",\"van\",\"varias\",\"varios\",\"veces\",\"ver\",\"vez\",\"y\",\"ya\",\"yo\"];\n\nSTOPWORDS.IT = [\"a\",\"abbastanza\",\"accidenti\",\"ad\",\"adesso\",\"affinche\",\"agli\",\"ahime\",\"ahimÃ¨\",\"ai\",\"al\",\"alcuna\",\"alcuni\",\"alcuno\",\"all\",\"alla\",\"alle\",\"allo\",\"altri\",\"altrimenti\",\"altro\",\"altrui\",\"anche\",\"ancora\",\"anni\",\"anno\",\"ansa\",\"assai\",\"attesa\",\"avanti\",\"avendo\",\"avente\",\"aver\",\"avere\",\"avete\",\"aveva\",\"avuta\",\"avute\",\"avuti\",\"avuto\",\"basta\",\"bene\",\"benissimo\",\"berlusconi\",\"brava\",\"bravo\",\"c\",\"casa\",\"caso\",\"cento\",\"certa\",\"certe\",\"certi\",\"certo\",\"che\",\"chi\",\"chicchessia\",\"chiunque\",\"ci\",\"ciascuna\",\"ciascuno\",\"cima\",\"cio\",\"ciÃ²\",\"cioe\",\"cioÃ¨\",\"circa\",\"citta\",\"cittÃ \",\"codesta\",\"codesti\",\"codesto\",\"cogli\",\"coi\",\"col\",\"colei\",\"coll\",\"coloro\",\"colui\",\"come\",\"con\",\"concernente\",\"consiglio\",\"contro\",\"cortesia\",\"cos\",\"cosa\",\"cosi\",\"cosÃ¬\",\"cui\",\"d\",\"da\",\"dagli\",\"dai\",\"dal\",\"dall\",\"dalla\",\"dalle\",\"dallo\",\"davanti\",\"degli\",\"dei\",\"del\",\"dell\",\"della\",\"delle\",\"dello\",\"dentro\",\"detto\",\"deve\",\"di\",\"dice\",\"dietro\",\"dire\",\"dirimpetto\",\"dopo\",\"dove\",\"dovra\",\"dovrÃ \",\"due\",\"dunque\",\"durante\",\"e\",\"Ã¨\",\"ecco\",\"ed\",\"egli\",\"ella\",\"eppure\",\"era\",\"erano\",\"esse\",\"essendo\",\"esser\",\"essere\",\"essi\",\"ex\",\"fa\",\"fare\",\"fatto\",\"favore\",\"fin\",\"finalmente\",\"finche\",\"fine\",\"fino\",\"forse\",\"fra\",\"fuori\",\"gia\",\"giÃ \",\"giacche\",\"giorni\",\"giorno\",\"gli\",\"gliela\",\"gliele\",\"glieli\",\"glielo\",\"gliene\",\"governo\",\"grande\",\"grazie\",\"gruppo\",\"ha\",\"hai\",\"hanno\",\"ho\",\"i\",\"ieri\",\"il\",\"improvviso\",\"in\",\"infatti\",\"insieme\",\"intanto\",\"intorno\",\"invece\",\"io\",\"l\",\"la\",\"lÃ \",\"lavoro\",\"le\",\"lei\",\"li\",\"lo\",\"lontano\",\"loro\",\"lui\",\"lungo\",\"ma\",\"macche\",\"magari\",\"mai\",\"male\",\"malgrado\",\"malissimo\",\"me\",\"medesimo\",\"mediante\",\"meglio\",\"meno\",\"mentre\",\"mesi\",\"mezzo\",\"mi\",\"mia\",\"mie\",\"miei\",\"mila\",\"miliardi\",\"milioni\",\"ministro\",\"mio\",\"moltissimo\",\"molto\",\"mondo\",\"nazionale\",\"ne\",\"negli\",\"nei\",\"nel\",\"nell\",\"nella\",\"nelle\",\"nello\",\"nemmeno\",\"neppure\",\"nessuna\",\"nessuno\",\"niente\",\"no\",\"noi\",\"non\",\"nondimeno\",\"nostra\",\"nostre\",\"nostri\",\"nostro\",\"nulla\",\"nuovo\",\"o\",\"od\",\"oggi\",\"ogni\",\"ognuna\",\"ognuno\",\"oltre\",\"oppure\",\"ora\",\"ore\",\"osi\",\"ossia\",\"paese\",\"parecchi\",\"parecchie\",\"parecchio\",\"parte\",\"partendo\",\"peccato\",\"peggio\",\"per\",\"perche\",\"perchÃ¨\",\"percio\",\"perciÃ²\",\"perfino\",\"pero\",\"perÃ²\",\"persone\",\"piedi\",\"pieno\",\"piglia\",\"piu\",\"piÃ¹\",\"po\",\"pochissimo\",\"poco\",\"poi\",\"poiche\",\"press\",\"prima\",\"primo\",\"proprio\",\"puo\",\"puÃ²\",\"pure\",\"purtroppo\",\"qualche\",\"qualcuna\",\"qualcuno\",\"quale\",\"quali\",\"qualunque\",\"quando\",\"quanta\",\"quante\",\"quanti\",\"quanto\",\"quantunque\",\"quasi\",\"quattro\",\"quel\",\"quella\",\"quelli\",\"quello\",\"quest\",\"questa\",\"queste\",\"questi\",\"questo\",\"qui\",\"quindi\",\"riecco\",\"salvo\",\"sara\",\"sarÃ \",\"sarebbe\",\"scopo\",\"scorso\",\"se\",\"secondo\",\"seguente\",\"sei\",\"sempre\",\"senza\",\"si\",\"sia\",\"siamo\",\"siete\",\"solito\",\"solo\",\"sono\",\"sopra\",\"sotto\",\"sta\",\"staranno\",\"stata\",\"state\",\"stati\",\"stato\",\"stesso\",\"su\",\"sua\",\"successivo\",\"sue\",\"sugli\",\"sui\",\"sul\",\"sull\",\"sulla\",\"sulle\",\"sullo\",\"suo\",\"suoi\",\"tale\",\"talvolta\",\"tanto\",\"te\",\"tempo\",\"ti\",\"torino\",\"tra\",\"tranne\",\"tre\",\"troppo\",\"tu\",\"tua\",\"tue\",\"tuo\",\"tuoi\",\"tutta\",\"tuttavia\",\"tutte\",\"tutti\",\"tutto\",\"uguali\",\"un\",\"una\",\"uno\",\"uomo\",\"va\",\"vale\",\"varia\",\"varie\",\"vario\",\"verso\",\"vi\",\"via\",\"vicino\",\"visto\",\"vita\",\"voi\",\"volta\",\"vostra\",\"vostre\",\"vostri\",\"vostro\"];\n\n\n// EXPORTS //\n\nmodule.exports = exports = STOPWORDS;\n"}